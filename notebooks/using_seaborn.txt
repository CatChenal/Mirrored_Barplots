#.... TODO: seaborn .....

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def sns_mirrored_bar(ax, x, y1, y2,
                     orient='horizontal',
                     fc=['#ff6347','#74b088'],
                     series_labels=['Series1', 'Series2'],
                     legend=True,
                     label_bars=False,
                     tc=['#ff6347','#74b088'],
                     axis_label='Series values',
                     title=None,
                     alfa=0.6,
                     round_to=2):

    
    o = orient.lower()[0]
    if o not in ['h', 'v']:
        raise ValueError("orient not in ['h', 'horizontal', 'v', 'vertical'].")
    
    if o == 'h':
        B1 = sns.barplot(x, -y1,
                    #x='x', y='y',
                    #data={'x':x, 'y':-y1},
                    label=series_labels[0],
                    ax=ax,
                    color=fc[0],
                    saturation=alfa)
                
        B2 = sns.barplot(x, y2,
                    #x='x', y='y',
                    #data={'x':x, 'y':y2},
                    label=series_labels[1],
                    ax=ax,
                    color=fc[1],
                    saturation=alfa)
    else:
        B1 = sns.barplot(-y1, x, 
                    #x='x', y='y',
                    #data={'x':-y1, 'y':x},
                    label=series_labels[0],
                    ax=ax,
                    color=fc[0],
                    orient='h',
                    saturation=alfa);

        B2 = sns.barplot(y2, x,
                    #x='x', y='y',
                    #data={'x':y2, 'y':x},
                    label=series_labels[1],
                    ax=ax,
                    color=fc[1],
                    orient='h',
                    saturation=alfa)

    ax.figure.canvas.draw()
    legend_cols = 2
                      
    if label_bars:
        ofs = 0.02
        font_style = {'fontweight':'bold'}
            
        for s in [0, 1]:
            col = tc[s]
            B = B1 if s == 0 else B2
            for b in B.patches:
                w = b.get_width()
                h = b.get_height()

                if o == 'v':
                    va = 'top' if s == 0 else 'bottom'
                    ha = 'center'
                    xloc = w + ofs
                    yloc = b.get_y() + h / 2
                    t = w
                else:
                    ha = 'right' if s == 0 else 'left'
                    va = 'center'
                    xloc = b.get_x() + w / 2
                    yloc = h + ofs
                    t = h

                ax.text(xloc, yloc,
                        '{:.{}f}'.format(np.abs(t), round_to),
                        color=col,
                        ha=ha,
                        va=va,
                        **font_style)
            
    if o == 'h':
        grid_axis = 'y'
        y = 1.
        #if label_bars:
        #    for i, v in enumerate(-y1):
        #        ax.text(i-0.15, v-0.08, str(np.abs(np.round(v,2))),
        #                color='r', fontweight='bold')
        #    for i, v in enumerate(y2):
        #        ax.text(i-0.15, v+0.05, str(np.abs(np.round(v,2))),
        #                color='g', fontweight='bold')
        
        ax.autoscale_view(tight=True, scalex=False, scaley=True)
        ax.yaxis.set_major_formatter('{x:.1f}')
        ax.set(xticks=[], ylabel=axis_label)

    else:
        grid_axis = 'x'
        y = .98
        #if label_bars:
        #    for i, v in enumerate(-y1):
        #        ax.text(v-.12, i+.15, str(np.abs(np.round(v,2))),
        #                color='r', fontweight='bold')
        #    for i, v in enumerate(y2):
        #        ax.text(v+.02, i+.15, str(np.abs(np.round(v,2))),
        #                color='g', fontweight='bold')
        
        ax.autoscale_view(tight=True, scalex=True, scaley=False)
        ax.xaxis.set_major_formatter('{x:.1f}')
        ax.set(yticks=[], xlabel=axis_label)

        
    mirrorbar_despine(ax, orient=orient)
 
    ax.grid(b=True,
            which='major',
            axis=grid_axis,
            color='w',
            linewidth=0.7)
    
    if legend:
        ax.legend(bbox_to_anchor=(0.2, y, 1., .10), 
                  loc='lower left',
                  ncol=legend_cols, 
                  frameon=False,
                  borderaxespad=0.)

    if title:
        ax.set_title(title, y=1.05)
        
    plt.tight_layout()
    